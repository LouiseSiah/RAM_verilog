--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone II" LPM_DECODES=16 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 10.0 cbx_cycloneii 2010:06:27:21:21:57:SJ cbx_lpm_add_sub 2010:06:27:21:21:57:SJ cbx_lpm_compare 2010:06:27:21:21:57:SJ cbx_lpm_decode 2010:06:27:21:21:57:SJ cbx_mgl 2010:06:27:21:25:48:SJ cbx_stratix 2010:06:27:21:21:57:SJ cbx_stratixii 2010:06:27:21:21:57:SJ  VERSION_END


-- Copyright (C) 1991-2010 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.



--synthesis_resources = lut 18 
SUBDESIGN decode_ppa
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[15..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[15..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode2104w[1..0]	: WIRE;
	w_anode2113w[3..0]	: WIRE;
	w_anode2130w[3..0]	: WIRE;
	w_anode2140w[3..0]	: WIRE;
	w_anode2150w[3..0]	: WIRE;
	w_anode2160w[3..0]	: WIRE;
	w_anode2170w[3..0]	: WIRE;
	w_anode2180w[3..0]	: WIRE;
	w_anode2190w[3..0]	: WIRE;
	w_anode2202w[1..0]	: WIRE;
	w_anode2209w[3..0]	: WIRE;
	w_anode2220w[3..0]	: WIRE;
	w_anode2230w[3..0]	: WIRE;
	w_anode2240w[3..0]	: WIRE;
	w_anode2250w[3..0]	: WIRE;
	w_anode2260w[3..0]	: WIRE;
	w_anode2270w[3..0]	: WIRE;
	w_anode2280w[3..0]	: WIRE;
	w_data2102w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[15..0] = eq_wire[15..0];
	eq_wire[] = ( ( w_anode2280w[3..3], w_anode2270w[3..3], w_anode2260w[3..3], w_anode2250w[3..3], w_anode2240w[3..3], w_anode2230w[3..3], w_anode2220w[3..3], w_anode2209w[3..3]), ( w_anode2190w[3..3], w_anode2180w[3..3], w_anode2170w[3..3], w_anode2160w[3..3], w_anode2150w[3..3], w_anode2140w[3..3], w_anode2130w[3..3], w_anode2113w[3..3]));
	w_anode2104w[] = ( (w_anode2104w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode2113w[] = ( (w_anode2113w[2..2] & (! w_data2102w[2..2])), (w_anode2113w[1..1] & (! w_data2102w[1..1])), (w_anode2113w[0..0] & (! w_data2102w[0..0])), w_anode2104w[1..1]);
	w_anode2130w[] = ( (w_anode2130w[2..2] & (! w_data2102w[2..2])), (w_anode2130w[1..1] & (! w_data2102w[1..1])), (w_anode2130w[0..0] & w_data2102w[0..0]), w_anode2104w[1..1]);
	w_anode2140w[] = ( (w_anode2140w[2..2] & (! w_data2102w[2..2])), (w_anode2140w[1..1] & w_data2102w[1..1]), (w_anode2140w[0..0] & (! w_data2102w[0..0])), w_anode2104w[1..1]);
	w_anode2150w[] = ( (w_anode2150w[2..2] & (! w_data2102w[2..2])), (w_anode2150w[1..1] & w_data2102w[1..1]), (w_anode2150w[0..0] & w_data2102w[0..0]), w_anode2104w[1..1]);
	w_anode2160w[] = ( (w_anode2160w[2..2] & w_data2102w[2..2]), (w_anode2160w[1..1] & (! w_data2102w[1..1])), (w_anode2160w[0..0] & (! w_data2102w[0..0])), w_anode2104w[1..1]);
	w_anode2170w[] = ( (w_anode2170w[2..2] & w_data2102w[2..2]), (w_anode2170w[1..1] & (! w_data2102w[1..1])), (w_anode2170w[0..0] & w_data2102w[0..0]), w_anode2104w[1..1]);
	w_anode2180w[] = ( (w_anode2180w[2..2] & w_data2102w[2..2]), (w_anode2180w[1..1] & w_data2102w[1..1]), (w_anode2180w[0..0] & (! w_data2102w[0..0])), w_anode2104w[1..1]);
	w_anode2190w[] = ( (w_anode2190w[2..2] & w_data2102w[2..2]), (w_anode2190w[1..1] & w_data2102w[1..1]), (w_anode2190w[0..0] & w_data2102w[0..0]), w_anode2104w[1..1]);
	w_anode2202w[] = ( (w_anode2202w[0..0] & data_wire[3..3]), enable_wire);
	w_anode2209w[] = ( (w_anode2209w[2..2] & (! w_data2102w[2..2])), (w_anode2209w[1..1] & (! w_data2102w[1..1])), (w_anode2209w[0..0] & (! w_data2102w[0..0])), w_anode2202w[1..1]);
	w_anode2220w[] = ( (w_anode2220w[2..2] & (! w_data2102w[2..2])), (w_anode2220w[1..1] & (! w_data2102w[1..1])), (w_anode2220w[0..0] & w_data2102w[0..0]), w_anode2202w[1..1]);
	w_anode2230w[] = ( (w_anode2230w[2..2] & (! w_data2102w[2..2])), (w_anode2230w[1..1] & w_data2102w[1..1]), (w_anode2230w[0..0] & (! w_data2102w[0..0])), w_anode2202w[1..1]);
	w_anode2240w[] = ( (w_anode2240w[2..2] & (! w_data2102w[2..2])), (w_anode2240w[1..1] & w_data2102w[1..1]), (w_anode2240w[0..0] & w_data2102w[0..0]), w_anode2202w[1..1]);
	w_anode2250w[] = ( (w_anode2250w[2..2] & w_data2102w[2..2]), (w_anode2250w[1..1] & (! w_data2102w[1..1])), (w_anode2250w[0..0] & (! w_data2102w[0..0])), w_anode2202w[1..1]);
	w_anode2260w[] = ( (w_anode2260w[2..2] & w_data2102w[2..2]), (w_anode2260w[1..1] & (! w_data2102w[1..1])), (w_anode2260w[0..0] & w_data2102w[0..0]), w_anode2202w[1..1]);
	w_anode2270w[] = ( (w_anode2270w[2..2] & w_data2102w[2..2]), (w_anode2270w[1..1] & w_data2102w[1..1]), (w_anode2270w[0..0] & (! w_data2102w[0..0])), w_anode2202w[1..1]);
	w_anode2280w[] = ( (w_anode2280w[2..2] & w_data2102w[2..2]), (w_anode2280w[1..1] & w_data2102w[1..1]), (w_anode2280w[0..0] & w_data2102w[0..0]), w_anode2202w[1..1]);
	w_data2102w[2..0] = data_wire[2..0];
END;
--VALID FILE
